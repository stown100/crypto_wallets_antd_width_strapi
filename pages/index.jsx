import Head from "next/head";
import "antd/dist/reset.css";
import Home from "../src/components/Home/Home";
import getCookie from "../src/components/hooks/getCookie";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import setCookie from "../src/components/hooks/setCookie";
import Spinner from "../src/components/Spinner/Spinner";
import auth from "../src/utils/Auth";
import api from "@/src/utils/Api";

export default function App() {
  const token = getCookie("token");
  const userId = getCookie("userId");
  const router = useRouter();
  const [loggeIn, setLoggedIn] = useState(false);
  const [dataSource, setDataSource] = useState([]);
  const [navBarItems, setNavBarItems] = useState([]);
  const [currentUser, setCurrentUser] = useState({});
  const [navId, setNavId] = useState(1);

  const authorided = (token) => {
    auth.getAuthMe(token).then((res) => {
      if (res) {
        setCurrentUser(res);
        setCookie("userId", res.id);
        setCookie("userName", res.username);
        setLoggedIn(true);
      }
    });
  };

  const getWallet = (token, userId) => {
    api.getWallets(token, userId).then((data) => {
      const results = data.data.map((item) => ({
        key: item.id,
        attributes: item.attributes,
      }));
      setDataSource(results);
    });
  };

  const getAllWallets = (token) => {
    api.getInitialWallets(token).then((data) => {
      const results = data.data.map((item) => ({
        key: item.id,
        attributes: item.attributes,
      }));
      setDataSource(results);
    });
  };

  const getNavBarItems = (token, userId) => {
    api.getNavBarItems(token, userId).then((data) => {
      setNavBarItems(data.data);
    });
  };

  useEffect(() => {
    if (token) {
      authorided(token);
      if (navId === 1) {
        getWallet(token, userId);
      }
      if (navId === 2) {
        getAllWallets(token);
      }
      getNavBarItems(token, currentUser?.depart?.id);
    } else {
      router.push("/forebidden");
    }
  }, [loggeIn, navId]);

  return loggeIn ? (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Home
          getWallet={getWallet}
          dataSource={dataSource}
          setDataSource={setDataSource}
          navBarItems={navBarItems}
          navId={navId}
          setNavId={setNavId}
          currentUser={currentUser}
        />
      </main>
    </>
  ) : (
    <Spinner />
  );
}
